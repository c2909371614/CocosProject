// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        myTexture: {value: white}
        bottom_texture: {value: white}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  #if TWO_COLORED
    in vec4 a_color2;
    out vec4 v_dark;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    pos = cc_matViewProj * pos;

    uv0 = a_texCoord;

    color = a_color;
    #if TWO_COLORED
      v_dark = a_color2;
    #endif

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;
  in vec2 uv0;
  #if USE_TEXTURE2
    uniform sampler2D myTexture;  
  #endif
  #if USE_TEXTURE_BOTTOM
    uniform sampler2D bottom_texture;
  #endif
  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE2
      o *= texture(myTexture, uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
        o.a *= texture(myTexture, uv0 + vec2(0, 0.5)).r;
      #endif
    #endif
    o *= color;
    ALPHA_TEST(o);
    float ap = o.a;
    #if USE_TEXTURE_BOTTOM
      vec4 oo = texture(bottom_texture, uv0);
      o = mix(o, oo, 1.0);
    #endif
    o.a = ap;
    return o;
  }
}%
